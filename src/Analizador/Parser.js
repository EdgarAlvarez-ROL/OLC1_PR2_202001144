/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,12],$V1=[1,13],$V2=[1,14],$V3=[1,11],$V4=[1,15],$V5=[1,16],$V6=[1,17],$V7=[1,18],$V8=[1,19],$V9=[5,9,18,31,34,36,37,38,39,40,41],$Va=[1,30],$Vb=[18,19],$Vc=[1,40],$Vd=[1,39],$Ve=[1,38],$Vf=[1,43],$Vg=[1,44],$Vh=[1,45],$Vi=[1,46],$Vj=[1,47],$Vk=[1,48],$Vl=[1,68],$Vm=[1,69],$Vn=[1,64],$Vo=[1,65],$Vp=[1,66],$Vq=[1,67],$Vr=[1,70],$Vs=[1,71],$Vt=[1,72],$Vu=[1,73],$Vv=[1,74],$Vw=[1,75],$Vx=[1,76],$Vy=[1,77],$Vz=[9,11,21,28,29,30,42,43,44,45,46,47,48,49,50,51,52,53,54],$VA=[1,82],$VB=[9,28,42],$VC=[1,91],$VD=[1,93],$VE=[28,42],$VF=[9,11,21,28,29,30,42,43,44,47,48,49,50,51,52,53,54],$VG=[9,11,21,28,29,30,42,47,48,53,54],$VH=[9,11,21,28,29,30,42,47,48,49,50,51,52,53,54],$VI=[5,9,18,31,33,34,36,37,38,39,40,41];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"SENTENCIAS":4,"EOF":5,"SENTENCIA":6,"BLOQUE_SENTENCAS":7,"{":8,"}":9,"DECLARACION":10,";":11,"FUNCION":12,"ASIGNACION":13,"IF":14,"LLAMADA_FUNCION":15,"WHILE":16,"CELDA":17,"id":18,"[":19,"EXP":20,"]":21,"TIPO":22,"=":23,"tnew":24,"LISTA_EXP":25,"(":26,"CASTEO":27,")":28,"++":29,"--":30,"tif":31,"ELSE":32,"telse":33,"twhile":34,"LISTA_PARAM":35,"tvoid":36,"tinteger":37,"tboolean":38,"tstring":39,"tdouble":40,"tchar":41,",":42,"+":43,"-":44,"*":45,"/":46,"==":47,"!=":48,"<":49,">":50,"<=":51,">=":52,"&&":53,"||":54,"entero":55,"decimal":56,"caracter":57,"cadena":58,"ttrue":59,"tfalse":60,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"{",9:"}",11:";",18:"id",19:"[",21:"]",23:"=",24:"tnew",26:"(",28:")",29:"++",30:"--",31:"tif",33:"telse",34:"twhile",36:"tvoid",37:"tinteger",38:"tboolean",39:"tstring",40:"tdouble",41:"tchar",42:",",43:"+",44:"-",45:"*",46:"/",47:"==",48:"!=",49:"<",50:">",51:"<=",52:">=",53:"&&",54:"||",55:"entero",56:"decimal",57:"caracter",58:"cadena",59:"ttrue",60:"tfalse"},
productions_: [0,[3,2],[4,2],[4,1],[7,3],[7,2],[6,2],[6,1],[6,1],[6,1],[6,2],[6,1],[17,4],[10,10],[10,8],[10,4],[10,2],[10,7],[13,4],[13,3],[13,3],[14,5],[14,6],[32,2],[32,2],[16,5],[12,6],[12,6],[12,5],[12,5],[22,1],[22,1],[22,1],[22,1],[22,1],[27,1],[27,1],[27,1],[35,4],[35,2],[25,3],[25,1],[15,4],[20,3],[20,3],[20,3],[20,3],[20,2],[20,2],[20,2],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        console.log("Parse de Jison entrada: OK ");
        let raiz = new Raiz($$[$0-1]);
        this.$ = raiz;
        return raiz;
    
break;
case 2:

                $$[$0-1].push($$[$0]);
                this.$ = $$[$0-1];
            
break;
case 3:

                let lstsent = [];
                lstsent.push($$[$0]);
                this.$ = lstsent;
            
break;
case 4:

                       this.$ = $$[$0-1];
                
break;
case 5:

                        this.$ = [];
                
break;
case 6: case 10:
 this.$ = $$[$0-1]; 
break;
case 7: case 8: case 9: case 11: case 60: case 61:
 this.$ = $$[$0]; 
break;
case 12:

            this.$ = new AccesoVector($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
        
break;
case 13:

                // console.log("lista de expresiones del id: " + $$[$0-6] + " es: " + $$[$0-1]);
                this.$ = new DeclararVariable($$[$0-9], $$[$0-6], [$$[$0-1]], undefined, $$[$0-3], _$[$0-6].first_line, _$[$0-6].first_column);
            
break;
case 14:

                // console.log("lista de expresiones del id: " + $$[$0-4] + " es: " + $$[$0-1]);
                this.$ = new DeclararVariable($$[$0-7], $$[$0-4], $$[$0-1], undefined, undefined, _$[$0-4].first_line, _$[$0-4].first_column);
            
break;
case 15:

                this.$ = new DeclararVariable($$[$0-3], $$[$0-2], $$[$0], undefined, undefined, _$[$0-2].first_line, _$[$0-2].first_column);
            
break;
case 16:

                this.$ = new DeclararVariable($$[$0-1], $$[$0], undefined, undefined, undefined, _$[$0].first_line, _$[$0].first_column);
            
break;
case 17:

                this.$ = new DeclararVariable($$[$0-6], $$[$0-5], $$[$0], $$[$0-2], undefined, _$[$0-5].first_line, _$[$0-5].first_column);
            
break;
case 18:

                this.$ = new Asignacion($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
            
break;
case 19:

                let info = new AccesoVariable($$[$0-2], _$[$0-2].first_line, _$[$0-2].first_column); 
                //console.log("papa: " + info);
                let incdec = new Incremento_y_Decremento(info, $$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column);
                this.$ = new Asignacion($$[$0-2], incdec, _$[$0-2].first_line, _$[$0-2].first_column);
            
break;
case 20:

                let info22 = new AccesoVariable($$[$0-2], _$[$0-2].first_line, _$[$0-2].first_column); 
                let incdec22 = new Incremento_y_Decremento(info, $$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column);
                this.$ = new Asignacion($$[$0-2], incdec, _$[$0-2].first_line, _$[$0-2].first_column);
            
break;
case 21:

            this.$ = new If($$[$0-2], $$[$0], [], _$[$0-4].first_line, _$[$0-4].first_column);
        
break;
case 22:

            this.$ = new If($$[$0-3], $$[$0-1], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column);
        
break;
case 23:

            let else_sent = [];
            else_sent.push($$[$0]);
            this.$ = else_sent;
        
break;
case 24:

            this.$ = $$[$0];
        
break;
case 25:

            this.$ = new While($$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column );
        
break;
case 26:

                this.$ = new DeclararFuncion($$[$0-5], $$[$0-4], $$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column);
            
break;
case 27:

                this.$ = new DeclararFuncion(new Tipo(TipoPrimitivo.Void), $$[$0-4], $$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column);
            
break;
case 28:

                this.$ = new DeclararFuncion($$[$0-4], $$[$0-3], [], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column);
            
break;
case 29:

                this.$ = new DeclararFuncion(new Tipo(TipoPrimitivo.Void), $$[$0-3], [], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column);
            
break;
case 30: case 35:
 this.$ = new Tipo(TipoPrimitivo.Integer); 
break;
case 31:
 this.$ = new Tipo(TipoPrimitivo.Boolean); 
break;
case 32:
 this.$ = new Tipo(TipoPrimitivo.String);  
break;
case 33: case 36:
 this.$ = new Tipo(TipoPrimitivo.Double);  
break;
case 34: case 37:
 this.$ = new Tipo(TipoPrimitivo.Char);    
break;
case 38:

                $$[$0-3].push( new DeclararVariable($$[$0-1], $$[$0], undefined, undefined, _$[$0-3].first_line, _$[$0-3].first_column) );
                this.$ = $$[$0-3];
            
break;
case 39:

                let decla1 = new DeclararVariable($$[$0-1], $$[$0], undefined, undefined, _$[$0-1].first_line, _$[$0-1].first_column);
                let params = [];
                params.push(decla1);
                this.$ = params;
            
break;
case 40:

            $$[$0-2].push($$[$0]);
            this.$ = $$[$0-2];
        
break;
case 41:
 
            let lista_exp = [];
            lista_exp.push($$[$0]);
            this.$ = lista_exp;
        
break;
case 42:
 this.$ = new LlamadaFuncion($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);    
break;
case 43: case 44: case 45: case 46:
 this.$ = new OperacionAritmetica($$[$0-2], $$[$0-1], $$[$0], _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 47: case 48:
 this.$ = new Incremento_y_Decremento($$[$0-1], $$[$0], _$[$0].first_line, _$[$0].first_column);
break;
case 49:
 this.$ = $$[$0];
break;
case 50:
 this.$ = $$[$0-1];
break;
case 51: case 52: case 53: case 54: case 55: case 56:
 this.$ = new OperacionRelacional($$[$0-2], $$[$0-1], $$[$0], _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 57: case 58:
 this.$ = new OperacionLogica($$[$0-2], $$[$0-1], $$[$0], _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 59:
 this.$ = new AccesoVariable($$[$0], _$[$0].first_line, _$[$0].first_column);        
break;
case 62:
 this.$ = new Valor($$[$0], "integer", _$[$0].first_line, _$[$0].first_column);
break;
case 63:
 this.$ = new Valor($$[$0], "double", _$[$0].first_line, _$[$0].first_column); 
break;
case 64:
 this.$ = new Valor($$[$0], "char", _$[$0].first_line, _$[$0].first_column);   
break;
case 65:
 this.$ = new Valor($$[$0], "string", _$[$0].first_line, _$[$0].first_column); 
break;
case 66:
 this.$ = new Valor($$[$0], "true", _$[$0].first_line, _$[$0].first_column);   
break;
case 67:
 this.$ = new Valor($$[$0], "false", _$[$0].first_line, _$[$0].first_column);  
break;
}
},
table: [{3:1,4:2,6:3,10:4,12:5,13:6,14:7,15:8,16:9,18:$V0,22:10,31:$V1,34:$V2,36:$V3,37:$V4,38:$V5,39:$V6,40:$V7,41:$V8},{1:[3]},{5:[1,20],6:21,10:4,12:5,13:6,14:7,15:8,16:9,18:$V0,22:10,31:$V1,34:$V2,36:$V3,37:$V4,38:$V5,39:$V6,40:$V7,41:$V8},o($V9,[2,3]),{11:[1,22]},o($V9,[2,7]),o($V9,[2,8]),o($V9,[2,9]),{11:[1,23]},o($V9,[2,11]),{18:[1,25],19:[1,24]},{18:[1,26]},{23:[1,27],26:$Va,29:[1,28],30:[1,29]},{26:[1,31]},{26:[1,32]},o($Vb,[2,30]),o($Vb,[2,31]),o($Vb,[2,32]),o($Vb,[2,33]),o($Vb,[2,34]),{1:[2,1]},o($V9,[2,2]),o($V9,[2,6]),o($V9,[2,10]),{21:[1,33]},{11:[2,16],23:[1,34],26:[1,35]},{26:[1,36]},{15:41,17:42,18:$Vc,20:37,26:$Vd,44:$Ve,55:$Vf,56:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk},{11:[1,49]},{11:[1,50]},{15:41,17:42,18:$Vc,20:52,25:51,26:$Vd,44:$Ve,55:$Vf,56:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk},{15:41,17:42,18:$Vc,20:53,26:$Vd,44:$Ve,55:$Vf,56:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk},{15:41,17:42,18:$Vc,20:54,26:$Vd,44:$Ve,55:$Vf,56:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk},{18:[1,55]},{15:41,17:42,18:$Vc,20:56,26:[1,57],44:$Ve,55:$Vf,56:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk},{22:60,28:[1,59],35:58,37:$V4,38:$V5,39:$V6,40:$V7,41:$V8},{22:60,28:[1,62],35:61,37:$V4,38:$V5,39:$V6,40:$V7,41:$V8},{11:[1,63],29:$Vl,30:$Vm,43:$Vn,44:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt,50:$Vu,51:$Vv,52:$Vw,53:$Vx,54:$Vy},{15:41,17:42,18:$Vc,20:78,26:$Vd,44:$Ve,55:$Vf,56:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk},{15:41,17:42,18:$Vc,20:79,26:$Vd,44:$Ve,55:$Vf,56:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk},o($Vz,[2,59],{19:[1,80],26:$Va}),o($Vz,[2,60]),o($Vz,[2,61]),o($Vz,[2,62]),o($Vz,[2,63]),o($Vz,[2,64]),o($Vz,[2,65]),o($Vz,[2,66]),o($Vz,[2,67]),o($V9,[2,19]),o($V9,[2,20]),{28:[1,81],42:$VA},o($VB,[2,41],{29:$Vl,30:$Vm,43:$Vn,44:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt,50:$Vu,51:$Vv,52:$Vw,53:$Vx,54:$Vy}),{28:[1,83],29:$Vl,30:$Vm,43:$Vn,44:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt,50:$Vu,51:$Vv,52:$Vw,53:$Vx,54:$Vy},{28:[1,84],29:$Vl,30:$Vm,43:$Vn,44:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt,50:$Vu,51:$Vv,52:$Vw,53:$Vx,54:$Vy},{23:[1,85]},{11:[2,15],29:$Vl,30:$Vm,43:$Vn,44:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt,50:$Vu,51:$Vv,52:$Vw,53:$Vx,54:$Vy},{15:41,17:42,18:$Vc,20:79,26:$Vd,27:86,37:[1,87],40:[1,88],41:[1,89],44:$Ve,55:$Vf,56:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk},{28:[1,90],42:$VC},{7:92,8:$VD},{18:[1,94]},{28:[1,95],42:$VC},{7:96,8:$VD},o($V9,[2,18]),{15:41,17:42,18:$Vc,20:97,26:$Vd,44:$Ve,55:$Vf,56:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk},{15:41,17:42,18:$Vc,20:98,26:$Vd,44:$Ve,55:$Vf,56:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk},{15:41,17:42,18:$Vc,20:99,26:$Vd,44:$Ve,55:$Vf,56:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk},{15:41,17:42,18:$Vc,20:100,26:$Vd,44:$Ve,55:$Vf,56:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk},o($Vz,[2,47]),o($Vz,[2,48]),{15:41,17:42,18:$Vc,20:101,26:$Vd,44:$Ve,55:$Vf,56:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk},{15:41,17:42,18:$Vc,20:102,26:$Vd,44:$Ve,55:$Vf,56:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk},{15:41,17:42,18:$Vc,20:103,26:$Vd,44:$Ve,55:$Vf,56:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk},{15:41,17:42,18:$Vc,20:104,26:$Vd,44:$Ve,55:$Vf,56:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk},{15:41,17:42,18:$Vc,20:105,26:$Vd,44:$Ve,55:$Vf,56:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk},{15:41,17:42,18:$Vc,20:106,26:$Vd,44:$Ve,55:$Vf,56:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk},{15:41,17:42,18:$Vc,20:107,26:$Vd,44:$Ve,55:$Vf,56:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk},{15:41,17:42,18:$Vc,20:108,26:$Vd,44:$Ve,55:$Vf,56:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk},o($Vz,[2,49]),{28:[1,109],29:$Vl,30:$Vm,43:$Vn,44:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt,50:$Vu,51:$Vv,52:$Vw,53:$Vx,54:$Vy},{15:41,17:42,18:$Vc,20:110,26:$Vd,44:$Ve,55:$Vf,56:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk},o($Vz,[2,42]),{15:41,17:42,18:$Vc,20:111,26:$Vd,44:$Ve,55:$Vf,56:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk},{7:112,8:$VD},{7:113,8:$VD},{8:[1,115],24:[1,114]},{28:[1,116]},{28:[2,35]},{28:[2,36]},{28:[2,37]},{7:117,8:$VD},{22:118,37:$V4,38:$V5,39:$V6,40:$V7,41:$V8},o($V9,[2,28]),{4:119,6:3,9:[1,120],10:4,12:5,13:6,14:7,15:8,16:9,18:$V0,22:10,31:$V1,34:$V2,36:$V3,37:$V4,38:$V5,39:$V6,40:$V7,41:$V8},o($VE,[2,39]),{7:121,8:$VD},o($V9,[2,29]),o($VF,[2,43],{45:$Vp,46:$Vq}),o($VF,[2,44],{45:$Vp,46:$Vq}),o($Vz,[2,45]),o($Vz,[2,46]),o($VG,[2,51],{43:$Vn,44:$Vo,45:$Vp,46:$Vq,49:$Vt,50:$Vu,51:$Vv,52:$Vw}),o($VG,[2,52],{43:$Vn,44:$Vo,45:$Vp,46:$Vq,49:$Vt,50:$Vu,51:$Vv,52:$Vw}),o($VH,[2,53],{43:$Vn,44:$Vo,45:$Vp,46:$Vq}),o($VH,[2,54],{43:$Vn,44:$Vo,45:$Vp,46:$Vq}),o($VH,[2,55],{43:$Vn,44:$Vo,45:$Vp,46:$Vq}),o($VH,[2,56],{43:$Vn,44:$Vo,45:$Vp,46:$Vq}),o([9,11,21,28,29,30,42,53,54],[2,57],{43:$Vn,44:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt,50:$Vu,51:$Vv,52:$Vw}),o([9,11,21,28,29,30,42,54],[2,58],{43:$Vn,44:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt,50:$Vu,51:$Vv,52:$Vw,53:$Vx}),o($Vz,[2,50]),{21:[1,122],29:$Vl,30:$Vm,43:$Vn,44:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt,50:$Vu,51:$Vv,52:$Vw,53:$Vx,54:$Vy},o($VB,[2,40],{29:$Vl,30:$Vm,43:$Vn,44:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt,50:$Vu,51:$Vv,52:$Vw,53:$Vx,54:$Vy}),o($V9,[2,21],{32:123,33:[1,124]}),o($V9,[2,25]),{22:125,37:$V4,38:$V5,39:$V6,40:$V7,41:$V8},{15:41,17:42,18:$Vc,20:52,25:126,26:$Vd,44:$Ve,55:$Vf,56:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk},{15:41,17:42,18:$Vc,20:127,26:$Vd,44:$Ve,55:$Vf,56:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk},o($V9,[2,26]),{18:[1,128]},{6:21,9:[1,129],10:4,12:5,13:6,14:7,15:8,16:9,18:$V0,22:10,31:$V1,34:$V2,36:$V3,37:$V4,38:$V5,39:$V6,40:$V7,41:$V8},o($VI,[2,5]),o($V9,[2,27]),o($Vz,[2,12]),o($V9,[2,22]),{7:131,8:$VD,14:130,31:$V1},{19:[1,132]},{9:[1,133],42:$VA},{11:[2,17],29:$Vl,30:$Vm,43:$Vn,44:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt,50:$Vu,51:$Vv,52:$Vw,53:$Vx,54:$Vy},o($VE,[2,38]),o($VI,[2,4]),o($V9,[2,23]),o($V9,[2,24]),{15:41,17:42,18:$Vc,20:134,26:$Vd,44:$Ve,55:$Vf,56:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk},{11:[2,14]},{21:[1,135],29:$Vl,30:$Vm,43:$Vn,44:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt,50:$Vu,51:$Vv,52:$Vw,53:$Vx,54:$Vy},{11:[2,13]}],
defaultActions: {20:[2,1],87:[2,35],88:[2,36],89:[2,37],133:[2,14],135:[2,13]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    let Raiz                        =   require("../Entorno/Raiz").Raiz;
    let Tipo                        =   require("../Entorno/Simbolos/Tipo").Tipo;
    let TipoPrimitivo               =   require("../Entorno/Simbolos/TipoPrimitivo").TipoPrimitivo;
    let DeclararVariable            =   require("../Instrucciones/DeclararVariable").DeclararVariable; 
    let DeclararFuncion             =   require("../Instrucciones/DeclararFuncion").DeclararFuncion;
    let Asignacion                  =   require("../Instrucciones/Asignacion").Asignacion;
    let If                          =   require("../Instrucciones/If").If;
    let Parametro                   =   require("../Instrucciones/Parametro").Parametro;
    let AccesoVariable              =   require("../Expresiones/AccesoVariable").AccesoVariable;
    let LlamadaFuncion              =   require("../Expresiones/LlamadaFuncion").LlamadaFuncion;
    let OperacionAritmetica         =   require("../Expresiones/OperacionAritmetica").OperacionAritmetica;
    let OperacionLogica             =   require("../Expresiones/OperacionLogica").OperacionLogica;
    let OperacionRelacional         =   require("../Expresiones/OperacionRelacional").OperacionRelacional;
    let While                       =   require("../Instrucciones/While").While;
    let Valor                       =   require("../Expresiones/Valor").Valor;

    let Incremento_y_Decremento     =   require("../Expresiones/Incremento_y_Decremento").Incremento_y_Decremento;
    let DeclararVector              =   require("../Instrucciones/DeclararVector").DeclararVector;
    let AccesoVector                =   require("../Expresiones/AccesoVector").AccesoVector;
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 5;
break;
case 2:/* IGNORE */
break;
case 3:/* IGNORE */
break;
case 4:   return 59;     
break;
case 5:   return 60;    
break;
case 6:   return 37;  
break;
case 7:   return 38;  
break;
case 8:   return 40;   
break;
case 9:   return 39;   
break;
case 10:   return 41;     
break;
case 11:   return 31;       
break;
case 12:   return 34;    
break;
case 13:   return 33;     
break;
case 14:   return 36;     
break;
case 15:   return 'treturn';   
break;
case 16:   return 24;      
break;
case 17:yy_.yytext = yy_.yytext.toLowerCase();          return 18;
break;
case 18:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2);     return 58;
break;
case 19:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2);     return 57
break;
case 20:return 56
break;
case 21:return 55
break;
case 22:return '$'
break;
case 23:return 29;
break;
case 24:return 30;
break;
case 25:return 43;
break;
case 26:return 44;
break;
case 27:return 45;
break;
case 28:return 46;
break;
case 29:return '%';
break;
case 30:return 26;
break;
case 31:return 28;
break;
case 32:return 47;
break;
case 33:return 23;
break;
case 34:return 42;
break;
case 35:return ':';
break;
case 36:return 11;
break;
case 37:return 54;
break;
case 38:return 53;
break;
case 39:return 48;
break;
case 40:return '!';
break;
case 41:return 51;
break;
case 42:return 52;
break;
case 43:return 50;
break;
case 44:return 49;
break;
case 45:return 8;
break;
case 46:return 9;
break;
case 47:return 19;
break;
case 48:return 21;
break;
case 49:
break;
}
},
rules: [/^(?:\s+)/,/^(?:$)/,/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:true\b)/,/^(?:false\b)/,/^(?:int\b)/,/^(?:boolean\b)/,/^(?:double\b)/,/^(?:string\b)/,/^(?:char\b)/,/^(?:if\b)/,/^(?:while\b)/,/^(?:else\b)/,/^(?:void\b)/,/^(?:return\b)/,/^(?:new\b)/,/^(?:([a-zA-ZÑñ]|(_[a-zA-ZÑñ]))([a-zA-ZÑñ]|[0-9]|_)*)/,/^(?:"(?:[(\[)|(\])]|["\\"]["bnrt/["\\"]|[^"["\\"])*")/,/^(?:'(?:(\\)["bfnrt/(\\)]|(\\)u[a-fA-F0-9]{4}|[^"(\\)])')/,/^(?:((?:[0-9]|[1-9][0-9]+))((?:\.[0-9]+))\b)/,/^(?:((?:[0-9]|[1-9][0-9]+))\b)/,/^(?:\$)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:\()/,/^(?:\))/,/^(?:==)/,/^(?:=)/,/^(?:,)/,/^(?::)/,/^(?:;)/,/^(?:\|\|)/,/^(?:&&)/,/^(?:!=)/,/^(?:!)/,/^(?:<=)/,/^(?:>=)/,/^(?:>)/,/^(?:<)/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Parser;
exports.Parser = Parser.Parser;
exports.parse = function () { return Parser.parse.apply(Parser, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}