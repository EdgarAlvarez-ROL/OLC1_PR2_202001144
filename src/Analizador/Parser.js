/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,16],$V1=[1,19],$V2=[1,18],$V3=[1,21],$V4=[1,22],$V5=[1,23],$V6=[1,15],$V7=[1,24],$V8=[1,25],$V9=[1,26],$Va=[1,27],$Vb=[1,28],$Vc=[1,20],$Vd=[1,17],$Ve=[5,9,22,33,37,39,42,45,46,49,50,52,53,54,55,56,58,86],$Vf=[1,34],$Vg=[1,37],$Vh=[1,40],$Vi=[1,38],$Vj=[1,39],$Vk=[1,44],$Vl=[1,43],$Vm=[1,42],$Vn=[1,47],$Vo=[1,48],$Vp=[1,49],$Vq=[1,50],$Vr=[1,51],$Vs=[1,52],$Vt=[1,53],$Vu=[1,54],$Vv=[1,55],$Vw=[1,56],$Vx=[1,57],$Vy=[1,58],$Vz=[1,59],$VA=[1,60],$VB=[1,67],$VC=[22,23],$VD=[2,20],$VE=[1,69],$VF=[11,32],$VG=[1,82],$VH=[1,83],$VI=[1,77],$VJ=[1,78],$VK=[1,79],$VL=[1,80],$VM=[1,81],$VN=[1,84],$VO=[1,85],$VP=[1,86],$VQ=[1,87],$VR=[1,88],$VS=[1,89],$VT=[1,90],$VU=[1,91],$VV=[9,11,25,32,38,40,41,57,59,60,61,62,63,64,65,66,67,68,69,70,71],$VW=[1,111],$VX=[1,124],$VY=[9,32,57],$VZ=[5,9,22,33,37,39,42,44,45,46,49,50,52,53,54,55,56,58,86],$V_=[1,164],$V$=[9,11,25,32,38,57,59,60,63,64,65,66,67,68,69,70,71],$V01=[9,11,25,32,38,57,59,60,61,62,63,64,65,66,67,68,69,70,71],$V11=[9,11,25,32,38,57,63,64,65,70,71],$V21=[9,11,25,32,38,57,63,64,65,66,67,68,69,70,71],$V31=[32,57],$V41=[1,196],$V51=[1,195],$V61=[9,37,39];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"SENTENCIAS":4,"EOF":5,"SENTENCIA":6,"BLOQUE_SENTENCAS":7,"{":8,"}":9,"DECLARACION":10,";":11,"FUNCION":12,"ASIGNACION":13,"SENTENCIAS_TRANSFERENCIA":14,"IF":15,"SWITCH":16,"LLAMADA_FUNCION":17,"WHILE":18,"FOR":19,"DOWHILE":20,"CELDA":21,"id":22,"[":23,"EXP":24,"]":25,"TIPO":26,"=":27,"tnew":28,"LISTA_EXP":29,"(":30,"CASTEO":31,")":32,"tswitch":33,"CASOES":34,"DEFAULTED":35,"CASESS":36,"tcase":37,":":38,"tdefault":39,"++":40,"--":41,"tif":42,"ELSE":43,"telse":44,"twhile":45,"tfor":46,"COMENZAR":47,"ACTUALIZAR":48,"tdo":49,"tvoid":50,"LISTA_PARAM":51,"tinteger":52,"tboolean":53,"tstring":54,"tdouble":55,"tchar":56,",":57,"tmain":58,"+":59,"-":60,"*":61,"/":62,"^":63,"==":64,"!=":65,"<":66,">":67,"<=":68,">=":69,"&&":70,"||":71,"toLower":72,"toUpper":73,"round":74,"length":75,"truncate":76,"typeOf":77,"TTtoString":78,"toCharArray":79,"entero":80,"decimal":81,"caracter":82,"cadena":83,"ttrue":84,"tfalse":85,"treturn":86,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"{",9:"}",11:";",22:"id",23:"[",25:"]",27:"=",28:"tnew",30:"(",32:")",33:"tswitch",37:"tcase",38:":",39:"tdefault",40:"++",41:"--",42:"tif",44:"telse",45:"twhile",46:"tfor",49:"tdo",50:"tvoid",52:"tinteger",53:"tboolean",54:"tstring",55:"tdouble",56:"tchar",57:",",58:"tmain",59:"+",60:"-",61:"*",62:"/",63:"^",64:"==",65:"!=",66:"<",67:">",68:"<=",69:">=",70:"&&",71:"||",72:"toLower",73:"toUpper",74:"round",75:"length",76:"truncate",77:"typeOf",78:"TTtoString",79:"toCharArray",80:"entero",81:"decimal",82:"caracter",83:"cadena",84:"ttrue",85:"tfalse",86:"treturn"},
productions_: [0,[3,2],[4,2],[4,1],[7,3],[7,2],[6,2],[6,1],[6,2],[6,1],[6,1],[6,1],[6,2],[6,1],[6,1],[6,1],[21,4],[10,10],[10,8],[10,4],[10,2],[10,7],[16,8],[16,7],[16,7],[34,2],[34,1],[36,4],[35,3],[13,3],[13,2],[13,2],[15,5],[15,6],[43,2],[43,2],[18,5],[19,9],[47,1],[47,1],[48,1],[20,7],[12,5],[12,5],[12,6],[12,6],[26,1],[26,1],[26,1],[26,1],[26,1],[31,1],[31,1],[31,1],[51,4],[51,2],[29,3],[29,1],[17,3],[17,4],[17,4],[17,5],[24,3],[24,3],[24,3],[24,3],[24,3],[24,2],[24,2],[24,2],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,1],[24,1],[24,1],[24,4],[24,4],[24,4],[24,4],[24,4],[24,4],[24,4],[24,4],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[14,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        console.log("Parse de Jison entrada: OK ");
        let raiz = new Raiz($$[$0-1]);
        this.$ = raiz;
        return raiz;
    
break;
case 2:

                $$[$0-1].push($$[$0]);
                this.$ = $$[$0-1];
            
break;
case 3:

                let lstsent = [];
                lstsent.push($$[$0]);
                this.$ = lstsent;
            
break;
case 4:

                       this.$ = $$[$0-1];
                
break;
case 5:

                        this.$ = [];
                
break;
case 6: case 8: case 12:
 this.$ = $$[$0-1]; 
break;
case 7: case 9: case 10: case 11: case 13: case 14: case 15: case 38: case 39: case 40: case 80: case 81:
 this.$ = $$[$0]; 
break;
case 16:

            this.$ = new AccesoVector($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
        
break;
case 17:

                // console.log("lista de expresiones del id: " + $$[$0-6] + " es: " + $$[$0-1]);
                this.$ = new DeclararVariable($$[$0-9], $$[$0-6], [$$[$0-1]], undefined, $$[$0-3], _$[$0-6].first_line, _$[$0-6].first_column);
            
break;
case 18:

                // console.log("lista de expresiones del id: " + $$[$0-4] + " es: " + $$[$0-1]);
                this.$ = new DeclararVariable($$[$0-7], $$[$0-4], $$[$0-1], undefined, undefined, _$[$0-4].first_line, _$[$0-4].first_column);
            
break;
case 19:

                this.$ = new DeclararVariable($$[$0-3], $$[$0-2], $$[$0], undefined, undefined, _$[$0-2].first_line, _$[$0-2].first_column);
            
break;
case 20:

                this.$ = new DeclararVariable($$[$0-1], $$[$0], undefined, undefined, undefined, _$[$0].first_line, _$[$0].first_column);
            
break;
case 21:

                this.$ = new DeclararVariable($$[$0-6], $$[$0-5], $$[$0], $$[$0-2], undefined, _$[$0-5].first_line, _$[$0-5].first_column);
            
break;
case 22:
 this.$= new Switch($$[$0-5], $$[$0-2], $$[$0-1], _$[$0-7].first_line, _$[$0-7].first_column); 
break;
case 23:
 this.$= new Switch($$[$0-4], $$[$0-1], undefined, _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 24:
 this.$= new Switch($$[$0-4], undefined, $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 25:
 
                $$[$0-1].push($$[$0]);
                this.$= $$[$0-1]; 
            
break;
case 26:
 this.$ = [$$[$0]]; 
break;
case 27:
 this.$ = new Cases($$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 28:
 this.$ = new Default($$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 29:

                this.$ = new Asignacion($$[$0-2], $$[$0], "0", _$[$0-2].first_line, _$[$0-2].first_column);
            
break;
case 30:

                let info = new AccesoVariable($$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column); 
                //console.log("papa: " + info);
                let incdec = new Incremento_y_Decremento(info, $$[$0], _$[$0].first_line, _$[$0].first_column);
                this.$ = new Asignacion($$[$0-1], incdec, "0", _$[$0-1].first_line, _$[$0-1].first_column);
            
break;
case 31:

                let info22 = new AccesoVariable($$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column); 
                let incdec22 = new Incremento_y_Decremento(info22, $$[$0], _$[$0].first_line, _$[$0].first_column);
                this.$ = new Asignacion($$[$0-1], incdec22, "0", _$[$0-1].first_line, _$[$0-1].first_column);
            
break;
case 32:

            this.$ = new If($$[$0-2], $$[$0], [], _$[$0-4].first_line, _$[$0-4].first_column);
        
break;
case 33:

            this.$ = new If($$[$0-3], $$[$0-1], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column);
        
break;
case 34:

            let else_sent = [];
            else_sent.push($$[$0]);
            this.$ = else_sent;
        
break;
case 35:

            this.$ = $$[$0];
        
break;
case 36:

            this.$ = new While($$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column );
        
break;
case 37:

            this.$ = new For($$[$0-6], $$[$0-4], $$[$0-2], $$[$0], _$[$0-8].first_line, _$[$0-8].first_column );
        
break;
case 41:

                this.$ = new DoWhile($$[$0-2], $$[$0-5], _$[$0-6].first_line, _$[$0-6].first_column );
            
break;
case 42:

                this.$ = new DeclararFuncion($$[$0-4], $$[$0-3], [], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column);
            
break;
case 43:

                this.$ = new DeclararFuncion(new Tipo(TipoPrimitivo.Void), $$[$0-3], [], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column);
            
break;
case 44:

                this.$ = new DeclararFuncion($$[$0-5], $$[$0-4], $$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column);
            
break;
case 45:

                this.$ = new DeclararFuncion(new Tipo(TipoPrimitivo.Void), $$[$0-4], $$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column);
            
break;
case 46: case 51:
 this.$ = new Tipo(TipoPrimitivo.Integer); 
break;
case 47:
 this.$ = new Tipo(TipoPrimitivo.Boolean); 
break;
case 48:
 this.$ = new Tipo(TipoPrimitivo.String);  
break;
case 49: case 52:
 this.$ = new Tipo(TipoPrimitivo.Double);  
break;
case 50: case 53:
 this.$ = new Tipo(TipoPrimitivo.Char);    
break;
case 54:

                $$[$0-3].push( new DeclararVariable($$[$0-1], $$[$0], undefined, undefined, undefined, _$[$0-3].first_line, _$[$0-3].first_column) );
                this.$ = $$[$0-3];
            
break;
case 55:

                let decla1 = new DeclararVariable($$[$0-1], $$[$0], undefined, undefined, undefined, _$[$0].first_line, _$[$0].first_column);
                let params = [];
                params.push(decla1);
                this.$ = params;
            
break;
case 56:

            $$[$0-2].push($$[$0]);
            this.$ = $$[$0-2];
        
break;
case 57:
 
            let lista_exp = [];
            lista_exp.push($$[$0]);
            this.$ = lista_exp;
        
break;
case 58:
 this.$ = new LlamadaFuncion($$[$0-2], [], _$[$0-2].first_line, _$[$0-2].first_column);    
break;
case 59:
 this.$ = new LlamadaFuncion($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);    
break;
case 60:
 this.$ = new LlamadaFuncion($$[$0-2], [], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 61:
 this.$ = new LlamadaFuncion($$[$0-3], $$[$0-1], _$[$0-4].first_line, _$[$0-4].first_column);    
break;
case 62: case 63: case 64: case 65: case 66:
 this.$ = new OperacionAritmetica($$[$0-2], $$[$0-1], $$[$0], _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 67: case 68:
 this.$ = new Incremento_y_Decremento($$[$0-1], $$[$0], _$[$0].first_line, _$[$0].first_column);
break;
case 69:
 this.$ = new OperacionAritmetica($$[$0], "NIGA", $$[$0], _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 70:
 this.$ = $$[$0-1];
break;
case 71: case 72: case 73: case 74: case 75: case 76:
 this.$ = new OperacionRelacional($$[$0-2], $$[$0-1], $$[$0], _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 77: case 78:
 this.$ = new OperacionLogica($$[$0-2], $$[$0-1], $$[$0], _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 79:
 this.$ = new AccesoVariable($$[$0], _$[$0].first_line, _$[$0].first_column);        
break;
case 82:
 this.$ = new toLower($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 83:
 this.$ = new toUpper($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 84:
 this.$ = new round($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 85:
 this.$ = new length($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 86:
 this.$ = new truncate($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 87:
 this.$ = new typeOf($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 88:
 this.$ = new TtoString($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 89:
 this.$ = new toCharArray($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 90:
 this.$ = new Valor($$[$0], "integer", _$[$0].first_line, _$[$0].first_column);
break;
case 91:
 this.$ = new Valor($$[$0], "double", _$[$0].first_line, _$[$0].first_column); 
break;
case 92:
 this.$ = new Valor($$[$0], "char", _$[$0].first_line, _$[$0].first_column);   
break;
case 93:
 this.$ = new Valor($$[$0], "string", _$[$0].first_line, _$[$0].first_column); 
break;
case 94:
 this.$ = new Valor($$[$0], "true", _$[$0].first_line, _$[$0].first_column);   
break;
case 95:
 this.$ = new Valor($$[$0], "false", _$[$0].first_line, _$[$0].first_column);  
break;
case 96:
 this.$ = new Return($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
}
},
table: [{3:1,4:2,6:3,10:4,12:5,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:13,22:$V0,26:14,33:$V1,42:$V2,45:$V3,46:$V4,49:$V5,50:$V6,52:$V7,53:$V8,54:$V9,55:$Va,56:$Vb,58:$Vc,86:$Vd},{1:[3]},{5:[1,29],6:30,10:4,12:5,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:13,22:$V0,26:14,33:$V1,42:$V2,45:$V3,46:$V4,49:$V5,50:$V6,52:$V7,53:$V8,54:$V9,55:$Va,56:$Vb,58:$Vc,86:$Vd},o($Ve,[2,3]),{11:[1,31]},o($Ve,[2,7]),{11:[1,32]},o($Ve,[2,9]),o($Ve,[2,10]),o($Ve,[2,11]),{11:[1,33]},o($Ve,[2,13]),o($Ve,[2,14]),o($Ve,[2,15]),{22:[1,35],23:$Vf},{22:[1,36]},{27:$Vg,30:$Vh,40:$Vi,41:$Vj},{17:45,21:46,22:$Vk,24:41,30:$Vl,58:$Vc,60:$Vm,72:$Vn,73:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA},{30:[1,61]},{30:[1,62]},{22:[1,63]},{30:[1,64]},{30:[1,65]},{7:66,8:$VB},o($VC,[2,46]),o($VC,[2,47]),o($VC,[2,48]),o($VC,[2,49]),o($VC,[2,50]),{1:[2,1]},o($Ve,[2,2]),o($Ve,[2,6]),o($Ve,[2,8]),o($Ve,[2,12]),{25:[1,68]},{11:$VD,27:$VE,30:[1,70]},{30:[1,71]},{17:45,21:46,22:$Vk,24:72,30:$Vl,58:$Vc,60:$Vm,72:$Vn,73:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA},o($VF,[2,30]),o($VF,[2,31]),{17:45,21:46,22:$Vk,24:75,29:74,30:$Vl,32:[1,73],58:$Vc,60:$Vm,72:$Vn,73:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA},{11:[1,76],40:$VG,41:$VH,59:$VI,60:$VJ,61:$VK,62:$VL,63:$VM,64:$VN,65:$VO,66:$VP,67:$VQ,68:$VR,69:$VS,70:$VT,71:$VU},{17:45,21:46,22:$Vk,24:92,30:$Vl,58:$Vc,60:$Vm,72:$Vn,73:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA},{17:45,21:46,22:$Vk,24:93,30:$Vl,58:$Vc,60:$Vm,72:$Vn,73:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA},o($VV,[2,79],{23:[1,94],30:$Vh}),o($VV,[2,80]),o($VV,[2,81]),{30:[1,95]},{30:[1,96]},{30:[1,97]},{30:[1,98]},{30:[1,99]},{30:[1,100]},{30:[1,101]},{30:[1,102]},o($VV,[2,90]),o($VV,[2,91]),o($VV,[2,92]),o($VV,[2,93]),o($VV,[2,94]),o($VV,[2,95]),{17:45,21:46,22:$Vk,24:103,30:$Vl,58:$Vc,60:$Vm,72:$Vn,73:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA},{17:45,21:46,22:$Vk,24:104,30:$Vl,58:$Vc,60:$Vm,72:$Vn,73:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA},{30:[1,105]},{17:45,21:46,22:$Vk,24:106,30:$Vl,58:$Vc,60:$Vm,72:$Vn,73:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA},{10:108,13:109,22:$VW,26:110,47:107,52:$V7,53:$V8,54:$V9,55:$Va,56:$Vb},{45:[1,112]},{4:113,6:3,9:[1,114],10:4,12:5,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:13,22:$V0,26:14,33:$V1,42:$V2,45:$V3,46:$V4,49:$V5,50:$V6,52:$V7,53:$V8,54:$V9,55:$Va,56:$Vb,58:$Vc,86:$Vd},{22:[1,115]},{17:45,21:46,22:$Vk,24:116,30:[1,117],58:$Vc,60:$Vm,72:$Vn,73:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA},{26:120,32:[1,118],51:119,52:$V7,53:$V8,54:$V9,55:$Va,56:$Vb},{26:120,32:[1,121],51:122,52:$V7,53:$V8,54:$V9,55:$Va,56:$Vb},o($VF,[2,29],{40:$VG,41:$VH,59:$VI,60:$VJ,61:$VK,62:$VL,63:$VM,64:$VN,65:$VO,66:$VP,67:$VQ,68:$VR,69:$VS,70:$VT,71:$VU}),o($VV,[2,58]),{32:[1,123],57:$VX},o($VY,[2,57],{40:$VG,41:$VH,59:$VI,60:$VJ,61:$VK,62:$VL,63:$VM,64:$VN,65:$VO,66:$VP,67:$VQ,68:$VR,69:$VS,70:$VT,71:$VU}),o($Ve,[2,96]),{17:45,21:46,22:$Vk,24:125,30:$Vl,58:$Vc,60:$Vm,72:$Vn,73:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA},{17:45,21:46,22:$Vk,24:126,30:$Vl,58:$Vc,60:$Vm,72:$Vn,73:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA},{17:45,21:46,22:$Vk,24:127,30:$Vl,58:$Vc,60:$Vm,72:$Vn,73:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA},{17:45,21:46,22:$Vk,24:128,30:$Vl,58:$Vc,60:$Vm,72:$Vn,73:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA},{17:45,21:46,22:$Vk,24:129,30:$Vl,58:$Vc,60:$Vm,72:$Vn,73:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA},o($VV,[2,67]),o($VV,[2,68]),{17:45,21:46,22:$Vk,24:130,30:$Vl,58:$Vc,60:$Vm,72:$Vn,73:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA},{17:45,21:46,22:$Vk,24:131,30:$Vl,58:$Vc,60:$Vm,72:$Vn,73:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA},{17:45,21:46,22:$Vk,24:132,30:$Vl,58:$Vc,60:$Vm,72:$Vn,73:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA},{17:45,21:46,22:$Vk,24:133,30:$Vl,58:$Vc,60:$Vm,72:$Vn,73:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA},{17:45,21:46,22:$Vk,24:134,30:$Vl,58:$Vc,60:$Vm,72:$Vn,73:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA},{17:45,21:46,22:$Vk,24:135,30:$Vl,58:$Vc,60:$Vm,72:$Vn,73:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA},{17:45,21:46,22:$Vk,24:136,30:$Vl,58:$Vc,60:$Vm,72:$Vn,73:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA},{17:45,21:46,22:$Vk,24:137,30:$Vl,58:$Vc,60:$Vm,72:$Vn,73:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA},o($VV,[2,69]),{32:[1,138],40:$VG,41:$VH,59:$VI,60:$VJ,61:$VK,62:$VL,63:$VM,64:$VN,65:$VO,66:$VP,67:$VQ,68:$VR,69:$VS,70:$VT,71:$VU},{17:45,21:46,22:$Vk,24:139,30:$Vl,58:$Vc,60:$Vm,72:$Vn,73:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA},{17:45,21:46,22:$Vk,24:140,30:$Vl,58:$Vc,60:$Vm,72:$Vn,73:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA},{17:45,21:46,22:$Vk,24:141,30:$Vl,58:$Vc,60:$Vm,72:$Vn,73:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA},{17:45,21:46,22:$Vk,24:142,30:$Vl,58:$Vc,60:$Vm,72:$Vn,73:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA},{17:45,21:46,22:$Vk,24:143,30:$Vl,58:$Vc,60:$Vm,72:$Vn,73:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA},{17:45,21:46,22:$Vk,24:144,30:$Vl,58:$Vc,60:$Vm,72:$Vn,73:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA},{17:45,21:46,22:$Vk,24:145,30:$Vl,58:$Vc,60:$Vm,72:$Vn,73:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA},{17:45,21:46,22:$Vk,24:146,30:$Vl,58:$Vc,60:$Vm,72:$Vn,73:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA},{17:45,21:46,22:$Vk,24:147,30:$Vl,58:$Vc,60:$Vm,72:$Vn,73:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA},{32:[1,148],40:$VG,41:$VH,59:$VI,60:$VJ,61:$VK,62:$VL,63:$VM,64:$VN,65:$VO,66:$VP,67:$VQ,68:$VR,69:$VS,70:$VT,71:$VU},{32:[1,149],40:$VG,41:$VH,59:$VI,60:$VJ,61:$VK,62:$VL,63:$VM,64:$VN,65:$VO,66:$VP,67:$VQ,68:$VR,69:$VS,70:$VT,71:$VU},{17:45,21:46,22:$Vk,24:75,29:151,30:$Vl,32:[1,150],58:$Vc,60:$Vm,72:$Vn,73:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA},{32:[1,152],40:$VG,41:$VH,59:$VI,60:$VJ,61:$VK,62:$VL,63:$VM,64:$VN,65:$VO,66:$VP,67:$VQ,68:$VR,69:$VS,70:$VT,71:$VU},{11:[1,153]},{11:[2,38]},{11:[2,39]},{22:[1,154],23:$Vf},{27:$Vg,40:$Vi,41:$Vj},{30:[1,155]},{6:30,9:[1,156],10:4,12:5,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:13,22:$V0,26:14,33:$V1,42:$V2,45:$V3,46:$V4,49:$V5,50:$V6,52:$V7,53:$V8,54:$V9,55:$Va,56:$Vb,58:$Vc,86:$Vd},o($VZ,[2,5]),{27:[1,157]},{11:[2,19],40:$VG,41:$VH,59:$VI,60:$VJ,61:$VK,62:$VL,63:$VM,64:$VN,65:$VO,66:$VP,67:$VQ,68:$VR,69:$VS,70:$VT,71:$VU},{17:45,21:46,22:$Vk,24:93,30:$Vl,31:158,52:[1,159],55:[1,160],56:[1,161],58:$Vc,60:$Vm,72:$Vn,73:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA},{7:162,8:$VB},{32:[1,163],57:$V_},{22:[1,165]},{7:166,8:$VB},{32:[1,167],57:$V_},o($VV,[2,59]),{17:45,21:46,22:$Vk,24:168,30:$Vl,58:$Vc,60:$Vm,72:$Vn,73:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA},o($V$,[2,62],{40:$VG,41:$VH,61:$VK,62:$VL}),o($V$,[2,63],{40:$VG,41:$VH,61:$VK,62:$VL}),o($V01,[2,64],{40:$VG,41:$VH}),o($V01,[2,65],{40:$VG,41:$VH}),o([9,11,25,32,38,57,63,70,71],[2,66],{40:$VG,41:$VH,59:$VI,60:$VJ,61:$VK,62:$VL,64:$VN,65:$VO,66:$VP,67:$VQ,68:$VR,69:$VS}),o($V11,[2,71],{40:$VG,41:$VH,59:$VI,60:$VJ,61:$VK,62:$VL,66:$VP,67:$VQ,68:$VR,69:$VS}),o($V11,[2,72],{40:$VG,41:$VH,59:$VI,60:$VJ,61:$VK,62:$VL,66:$VP,67:$VQ,68:$VR,69:$VS}),o($V21,[2,73],{40:$VG,41:$VH,59:$VI,60:$VJ,61:$VK,62:$VL}),o($V21,[2,74],{40:$VG,41:$VH,59:$VI,60:$VJ,61:$VK,62:$VL}),o($V21,[2,75],{40:$VG,41:$VH,59:$VI,60:$VJ,61:$VK,62:$VL}),o($V21,[2,76],{40:$VG,41:$VH,59:$VI,60:$VJ,61:$VK,62:$VL}),o([9,11,25,32,38,57,70,71],[2,77],{40:$VG,41:$VH,59:$VI,60:$VJ,61:$VK,62:$VL,63:$VM,64:$VN,65:$VO,66:$VP,67:$VQ,68:$VR,69:$VS}),o([9,11,25,32,38,57,71],[2,78],{40:$VG,41:$VH,59:$VI,60:$VJ,61:$VK,62:$VL,63:$VM,64:$VN,65:$VO,66:$VP,67:$VQ,68:$VR,69:$VS,70:$VT}),o($VV,[2,70]),{25:[1,169],40:$VG,41:$VH,59:$VI,60:$VJ,61:$VK,62:$VL,63:$VM,64:$VN,65:$VO,66:$VP,67:$VQ,68:$VR,69:$VS,70:$VT,71:$VU},{32:[1,170],40:$VG,41:$VH,59:$VI,60:$VJ,61:$VK,62:$VL,63:$VM,64:$VN,65:$VO,66:$VP,67:$VQ,68:$VR,69:$VS,70:$VT,71:$VU},{32:[1,171],40:$VG,41:$VH,59:$VI,60:$VJ,61:$VK,62:$VL,63:$VM,64:$VN,65:$VO,66:$VP,67:$VQ,68:$VR,69:$VS,70:$VT,71:$VU},{32:[1,172],40:$VG,41:$VH,59:$VI,60:$VJ,61:$VK,62:$VL,63:$VM,64:$VN,65:$VO,66:$VP,67:$VQ,68:$VR,69:$VS,70:$VT,71:$VU},{32:[1,173],40:$VG,41:$VH,59:$VI,60:$VJ,61:$VK,62:$VL,63:$VM,64:$VN,65:$VO,66:$VP,67:$VQ,68:$VR,69:$VS,70:$VT,71:$VU},{32:[1,174],40:$VG,41:$VH,59:$VI,60:$VJ,61:$VK,62:$VL,63:$VM,64:$VN,65:$VO,66:$VP,67:$VQ,68:$VR,69:$VS,70:$VT,71:$VU},{32:[1,175],40:$VG,41:$VH,59:$VI,60:$VJ,61:$VK,62:$VL,63:$VM,64:$VN,65:$VO,66:$VP,67:$VQ,68:$VR,69:$VS,70:$VT,71:$VU},{32:[1,176],40:$VG,41:$VH,59:$VI,60:$VJ,61:$VK,62:$VL,63:$VM,64:$VN,65:$VO,66:$VP,67:$VQ,68:$VR,69:$VS,70:$VT,71:$VU},{32:[1,177],40:$VG,41:$VH,59:$VI,60:$VJ,61:$VK,62:$VL,63:$VM,64:$VN,65:$VO,66:$VP,67:$VQ,68:$VR,69:$VS,70:$VT,71:$VU},{7:178,8:$VB},{8:[1,179]},o($VV,[2,60]),{32:[1,180],57:$VX},{7:181,8:$VB},{17:45,21:46,22:$Vk,24:182,30:$Vl,58:$Vc,60:$Vm,72:$Vn,73:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA},{11:$VD,27:$VE},{17:45,21:46,22:$Vk,24:183,30:$Vl,58:$Vc,60:$Vm,72:$Vn,73:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA},o($VZ,[2,4]),{8:[1,185],28:[1,184]},{32:[1,186]},{32:[2,51]},{32:[2,52]},{32:[2,53]},o($Ve,[2,42]),{7:187,8:$VB},{26:188,52:$V7,53:$V8,54:$V9,55:$Va,56:$Vb},o($V31,[2,55]),o($Ve,[2,43]),{7:189,8:$VB},o($VY,[2,56],{40:$VG,41:$VH,59:$VI,60:$VJ,61:$VK,62:$VL,63:$VM,64:$VN,65:$VO,66:$VP,67:$VQ,68:$VR,69:$VS,70:$VT,71:$VU}),o($VV,[2,16]),o($VV,[2,82]),o($VV,[2,83]),o($VV,[2,84]),o($VV,[2,85]),o($VV,[2,86]),o($VV,[2,87]),o($VV,[2,88]),o($VV,[2,89]),o($Ve,[2,32],{43:190,44:[1,191]}),{34:192,35:193,36:194,37:$V41,39:$V51},o($VV,[2,61]),o($Ve,[2,36]),{11:[1,197],40:$VG,41:$VH,59:$VI,60:$VJ,61:$VK,62:$VL,63:$VM,64:$VN,65:$VO,66:$VP,67:$VQ,68:$VR,69:$VS,70:$VT,71:$VU},{32:[1,198],40:$VG,41:$VH,59:$VI,60:$VJ,61:$VK,62:$VL,63:$VM,64:$VN,65:$VO,66:$VP,67:$VQ,68:$VR,69:$VS,70:$VT,71:$VU},{26:199,52:$V7,53:$V8,54:$V9,55:$Va,56:$Vb},{17:45,21:46,22:$Vk,24:75,29:200,30:$Vl,58:$Vc,60:$Vm,72:$Vn,73:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA},{17:45,21:46,22:$Vk,24:201,30:$Vl,58:$Vc,60:$Vm,72:$Vn,73:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA},o($Ve,[2,44]),{22:[1,202]},o($Ve,[2,45]),o($Ve,[2,33]),{7:204,8:$VB,15:203,42:$V2},{9:[1,206],35:205,36:207,37:$V41,39:$V51},{9:[1,208]},o($V61,[2,26]),{38:[1,209]},{17:45,21:46,22:$Vk,24:210,30:$Vl,58:$Vc,60:$Vm,72:$Vn,73:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA},{13:212,22:$VW,48:211},{11:[1,213]},{23:[1,214]},{9:[1,215],57:$VX},{11:[2,21],40:$VG,41:$VH,59:$VI,60:$VJ,61:$VK,62:$VL,63:$VM,64:$VN,65:$VO,66:$VP,67:$VQ,68:$VR,69:$VS,70:$VT,71:$VU},o($V31,[2,54]),o($Ve,[2,34]),o($Ve,[2,35]),{9:[1,216]},o($Ve,[2,23]),o($V61,[2,25]),o($Ve,[2,24]),{4:217,6:3,10:4,12:5,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:13,22:$V0,26:14,33:$V1,42:$V2,45:$V3,46:$V4,49:$V5,50:$V6,52:$V7,53:$V8,54:$V9,55:$Va,56:$Vb,58:$Vc,86:$Vd},{38:[1,218],40:$VG,41:$VH,59:$VI,60:$VJ,61:$VK,62:$VL,63:$VM,64:$VN,65:$VO,66:$VP,67:$VQ,68:$VR,69:$VS,70:$VT,71:$VU},{32:[1,219]},{32:[2,40]},o($Ve,[2,41]),{17:45,21:46,22:$Vk,24:220,30:$Vl,58:$Vc,60:$Vm,72:$Vn,73:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA},{11:[2,18]},o($Ve,[2,22]),{6:30,9:[2,28],10:4,12:5,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:13,22:$V0,26:14,33:$V1,42:$V2,45:$V3,46:$V4,49:$V5,50:$V6,52:$V7,53:$V8,54:$V9,55:$Va,56:$Vb,58:$Vc,86:$Vd},{4:221,6:3,10:4,12:5,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:13,22:$V0,26:14,33:$V1,42:$V2,45:$V3,46:$V4,49:$V5,50:$V6,52:$V7,53:$V8,54:$V9,55:$Va,56:$Vb,58:$Vc,86:$Vd},{7:222,8:$VB},{25:[1,223],40:$VG,41:$VH,59:$VI,60:$VJ,61:$VK,62:$VL,63:$VM,64:$VN,65:$VO,66:$VP,67:$VQ,68:$VR,69:$VS,70:$VT,71:$VU},o($V61,[2,27],{10:4,12:5,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:13,26:14,6:30,22:$V0,33:$V1,42:$V2,45:$V3,46:$V4,49:$V5,50:$V6,52:$V7,53:$V8,54:$V9,55:$Va,56:$Vb,58:$Vc,86:$Vd}),o($Ve,[2,37]),{11:[2,17]}],
defaultActions: {29:[2,1],108:[2,38],109:[2,39],159:[2,51],160:[2,52],161:[2,53],212:[2,40],215:[2,18],223:[2,17]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    let Raiz                        =   require("../Entorno/Raiz").Raiz;
    let Tipo                        =   require("../Entorno/Simbolos/Tipo").Tipo;
    let TipoPrimitivo               =   require("../Entorno/Simbolos/TipoPrimitivo").TipoPrimitivo;
    let DeclararVariable            =   require("../Instrucciones/DeclararVariable").DeclararVariable; 
    let DeclararFuncion             =   require("../Instrucciones/DeclararFuncion").DeclararFuncion;
    let Asignacion                  =   require("../Instrucciones/Asignacion").Asignacion;
    let If                          =   require("../Instrucciones/If").If;
    let Parametro                   =   require("../Instrucciones/Parametro").Parametro;
    let AccesoVariable              =   require("../Expresiones/AccesoVariable").AccesoVariable;
    let LlamadaFuncion              =   require("../Expresiones/LlamadaFuncion").LlamadaFuncion;
    let OperacionAritmetica         =   require("../Expresiones/OperacionAritmetica").OperacionAritmetica;
    let OperacionLogica             =   require("../Expresiones/OperacionLogica").OperacionLogica;
    let OperacionRelacional         =   require("../Expresiones/OperacionRelacional").OperacionRelacional;
    let While                       =   require("../Instrucciones/While").While;
    let Valor                       =   require("../Expresiones/Valor").Valor;

    let Incremento_y_Decremento     =   require("../Expresiones/Incremento_y_Decremento").Incremento_y_Decremento; //MOVI
    let DeclararVector              =   require("../Instrucciones/DeclararVector").DeclararVector;
    let AccesoVector                =   require("../Expresiones/AccesoVector").AccesoVector;
    let Cases                       =   require("../Instrucciones/Cases").Cases;
    let Switch                      =   require("../Instrucciones/Switch").Switch;
    let Default                     =   require("../Instrucciones/Default").Default;
    let For                         =   require("../Instrucciones/For").For;
    let DoWhile                     =   require("../Instrucciones/DoWhile").DoWhile;

    /* Funciones Reservadas Especiales y Nativas */
    let toLower                     =   require("../Expresiones/Funciones_Reservadas/toLower").toLower;
    let toUpper                     =   require("../Expresiones/Funciones_Reservadas/toUpper").toUpper;
    let round                       =   require("../Expresiones/Funciones_Reservadas/round").round;
    let length                      =   require("../Expresiones/Funciones_Reservadas/length").length;
    let truncate                    =   require("../Expresiones/Funciones_Reservadas/truncate").truncate;
    let typeOf                      =   require("../Expresiones/Funciones_Reservadas/typeOf").typeOf;
    let TtoString                   =   require("../Expresiones/Funciones_Reservadas/TtoString").TtoString;
    let toCharArray                 =   require("../Expresiones/Funciones_Reservadas/toCharArray").toCharArray;

    // SENTENCIAS DE TRANSFERENCIA
    let Return                      =   require("../Instrucciones/Sentencias_de_Transicion/Return").Return;                

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 5;
break;
case 2:/* IGNORE */
break;
case 3:/* IGNORE */
break;
case 4:   return 84;     
break;
case 5:   return 85;    
break;
case 6:   return 52;  
break;
case 7:   return 53;  
break;
case 8:   return 55;   
break;
case 9:   return 54;   
break;
case 10:   return 56;     
break;
case 11:   return 42;       
break;
case 12:   return 33;   
break;
case 13:   return 37;     
break;
case 14:   return 39;  
break;
case 15:   return 45;    
break;
case 16:   return 46;      
break;
case 17:   return 49;       
break;
case 18:   return 44;     
break;
case 19:   return 50;     
break;
case 20:   return 58;     
break;
case 21:   return 86;   
break;
case 22:   return 28;      
break;
case 23:   return 72;   
break;
case 24:   return 73;   
break;
case 25:   return 74;     
break;
case 26:   return 75;    
break;
case 27:   return 76;  
break;
case 28:   return 77;    
break;
case 29:   return 78;  
break;
case 30:   return 79; 
break;
case 31:yy_.yytext = yy_.yytext.toLowerCase();          return 22;
break;
case 32:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2);     return 83;
break;
case 33:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2);     return 82
break;
case 34:return 81
break;
case 35:return 80
break;
case 36:return '$'
break;
case 37:return 40;
break;
case 38:return 41;
break;
case 39:return 59;
break;
case 40:return 60;
break;
case 41:return 61;
break;
case 42:return 62;
break;
case 43:return 63;
break;
case 44:return '%';
break;
case 45:return 30;
break;
case 46:return 32;
break;
case 47:return 64;
break;
case 48:return 27;
break;
case 49:return 57;
break;
case 50:return 38;
break;
case 51:return 11;
break;
case 52:return 71;
break;
case 53:return 70;
break;
case 54:return 65;
break;
case 55:return '!';
break;
case 56:return 68;
break;
case 57:return 69;
break;
case 58:return 67;
break;
case 59:return 66;
break;
case 60:return 8;
break;
case 61:return 9;
break;
case 62:return 23;
break;
case 63:return 25;
break;
case 64:
break;
}
},
rules: [/^(?:\s+)/i,/^(?:$)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:int\b)/i,/^(?:boolean\b)/i,/^(?:double\b)/i,/^(?:string\b)/i,/^(?:char\b)/i,/^(?:if\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:else\b)/i,/^(?:void\b)/i,/^(?:main\b)/i,/^(?:return\b)/i,/^(?:new\b)/i,/^(?:toLower\b)/i,/^(?:toUpper\b)/i,/^(?:round\b)/i,/^(?:length\b)/i,/^(?:truncate\b)/i,/^(?:typeOf\b)/i,/^(?:tostring\b)/i,/^(?:toCharArray\b)/i,/^(?:([a-zA-ZÑñ]|(_[a-zA-ZÑñ]))([a-zA-ZÑñ]|[0-9]|_)*)/i,/^(?:"(?:[(\[)|(\])]|["\\"]["bnrt/["\\"]|[^"["\\"])*")/i,/^(?:'(?:(\\)["bfnrt/(\\)]|(\\)u[a-fA-F0-9]{4}|[^"(\\)])')/i,/^(?:((?:[0-9]|[1-9][0-9]+))((?:\.[0-9]+))\b)/i,/^(?:((?:[0-9]|[1-9][0-9]+))\b)/i,/^(?:\$)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:\()/i,/^(?:\))/i,/^(?:==)/i,/^(?:=)/i,/^(?:,)/i,/^(?::)/i,/^(?:;)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!=)/i,/^(?:!)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:<)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Parser;
exports.Parser = Parser.Parser;
exports.parse = function () { return Parser.parse.apply(Parser, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}